describe.skip("Hooks", () => {
  before(() => {
    cy.log("once before all tests in the block");
  });

  beforeEach(() => {
    cy.log("runs before each test in the block");
  });

  afterEach(() => {
    cy.log("runs after each test in the block");
  });
  after(() => {
    cy.log("runs once after all tests in the block");
  });

  it("Example test1", () => {
    cy.log("Example test1!");
  });
  it("Example test1", () => {
    cy.log("Example test2!");
  });
});
// describe('Cypress commands', () =>
//   ".and(chainers, method, value) || .and( callbackFn($item) ) "
//   ".as(aliasName) "
//   ".blur(options) "
//   ".check(valueS, options)"
//   ".children(selector, option)"
//   ".clear(options)"
//   ".clearCookie(name, options)" //yields null
//   ".cleaCookies(options)" //yields null
//   ".clearLocalStorage(keyS, options)" //yields null
//   ".click(position, options)"
//   ".clock(now, functionNames, options)"
//   ".closest(selector, options)"

// "
//  )


# name: Cypress tests
# on: [push]
# jobs:
#   cypress-run:
#     name: Cypress run
#     runs-on: ubuntu-20.04
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Cypress run
#         uses: cypress-io/github-action@v4
#         with:
#           spec: cypress/e2e/*
#       - uses: actions/upload-artifact@v2
#         if: failure()
#         with:
#           name: cypress-screenshots
#           path: cypress/screenshots
#       # Test run video was always captured, so this action uses "always()" condition
#       - uses: actions/upload-artifact@v2
#         if: always()
#         with:
#           name: cypress-videos
#           path: cypress/videos